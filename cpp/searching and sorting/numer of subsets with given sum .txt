#include <bits/stdc++.h>
using namespace std;
int countingd = 0;

bool issubset(int arr[], int n, int w)
{
    if (w == 0 && n >= 0)
    {
        countingd++;
        return 1;
    }
    if (n == 0)
    {
        return 0;
    }
    if (arr[n - 1] > w)
    {
        return issubset(arr, n - 1, w);
    }
    else
    {
        return issubset(arr, n - 1, w - arr[n - 1]) + issubset(arr, n - 1, w);
    }
}

int main()
{
    int arr[] = {1, 2,2, 1};
    int n = sizeof(arr) / sizeof(int);
    int weight = 3;
    issubset(arr, n, weight);
    if (countingd)
    {
        cout << countingd;
        return 0;
    }
    cout << "false";
    return 0;
}


/*

#include <bits/stdc++.h>
using namespace std;
int countingd = 0;


int main()
{
    int arr[] = {1, 2,2, 1};
    int n = sizeof(arr) / sizeof(int);
    int weight = 3;
    int dp[n+1][weight+1];
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=weight;j++)
        {
            dp[i][j]=0;
        }
    }

    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=weight;j++)
        {
            if(i ==0 ||  j==0)
            {
                if(i ==0 && j ==0)
                {
                    dp[i][j]=1;
                }
                else if(j==0)
                {
                    dp[i][j] =1;
                }
                else
                {
                    dp[i][j]=0;
                }
            }

            else
            {
                if(arr[i-1] > weight)
                {
                    dp[i][j] = dp[i-1][j];
                }
                else
                {
                    dp[i][j] = dp[i-1][j]+dp[i-1][j-arr[i-1]];
                }
            }
        }
    }
    cout<<dp[n][weight];
    return 0;
}

*/