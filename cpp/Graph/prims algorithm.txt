// dijkeshtras not

#include <bits/stdc++.h>
using namespace std;

struct cls
{
public:
    int src, wsf;
    string psf;
    cls(int src, string psf, int wsf)
    {
        this->psf = psf;
        this->src = src;
        this->wsf = wsf;   // in prims(minimum spanning treee we don't add the prev sum)
    }
};

class comparator
{
public:
    bool operator()(cls a, cls b)
    {
        if(b.wsf - a.wsf >0)
        {
            return false;
        }
        return true;
    }
};

string dijkeshtras(int src, vector<vector<pair<int, int>>> &adj)   // from src to travel all nodes using minim cost n = 7
{
    vector<bool> visited(7, false);
    priority_queue<cls, vector<cls>, comparator> q;
    string s = "";
    cls temp(src, to_string(src) + "-", 0);
    q.push(temp);
    int ans = 0;
    int count = 0;
    while (q.empty() == false)
    {
        temp = q.top();
        q.pop();
        cout << "the node is : " << temp.src << endl;
        ans = temp.wsf;
        s = s + to_string(temp.src) + "-";
        if(count >=6)  //n-1
        {
            break;
        }
        if (visited[temp.src] == true)
        {
            continue;
        }
        count++;
        visited[temp.src] = true;
        int i = 0;
        cout<<"for node  :  "<<temp.src<<"   :   ";
        for (auto p : adj[temp.src])
        {
            if (visited[p.first] == false)
            {
                cout<<p.first<<"  ";
                q.push(cls(p.first, temp.psf + to_string(p.first) + "-", p.second));
            }
        }
        cout<<endl;
    }
    s.pop_back();
    cout << s;
    cout<<"\nthe cost is  :  "<<ans;
    return "";
}

int main()
{
    int n = 5;
    vector<vector<pair<int, int>>> v(7);
    v[0].push_back(make_pair(1, 10));
    v[0].push_back(make_pair(3, 40));
    v[1].push_back(make_pair(0, 10));
    v[1].push_back(make_pair(2, 10));
    v[2].push_back(make_pair(1, 10));
    v[2].push_back(make_pair(3, 10));
    v[3].push_back(make_pair(0, 40));
    v[3].push_back(make_pair(4, 2));
    v[4].push_back(make_pair(3, 2));
    v[4].push_back(make_pair(5, 3));
    v[4].push_back(make_pair(6, 2));   
    v[5].push_back(make_pair(4, 3));
    v[5].push_back(make_pair(6, 3));
    v[6].push_back(make_pair(4, 8));
    v[6].push_back(make_pair(5, 3));
    dijkeshtras(0,v);
}





//second way
/*
#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
// Function to construct and print MST for
// a graph represented using adjacency
// list representation, with V vertices.
#define pii pair<int, int>
    int spanningTree(int V, int E, vector<vector<int>> graph)
    {
        int vis[V]; // vis tells if a vertex has been included in the mst
        int val[V];

        for (int i = 0; i < V; i++)
        {
            vis[i] = 0;
            val[i] = INT_MAX;
        }

        val[0] = 0;

        priority_queue<pii, vector<pii>, greater<pii>> pq;

        pq.push(make_pair(val[0], 0)); //{value,key} because ordering is done
                                       // according to the first element

        for (int i = 1; i < V; i++)
        {
            pq.push(make_pair(INT_MAX, i));
        }

        int cost = 0;

        while (!pq.empty())
        {
            pii u = pq.top();
            pq.pop();
            int i = u.second;

            if (!vis[i])
            {
                vis[i] = 1;
                cost += val[i];
                for (int j = 0; j < graph[i].size(); j++)
                {

                    if (graph[i][j] != INT_MAX && !vis[j] && graph[i][j] < val[j])
                    {
                        val[j] = graph[i][j];
                        pq.push(make_pair(val[j], j));
                    }
                }
            }
        }
        return cost;
    }
};
*/