class Solution {
public:
    
    
    void dfs(vector<vector<int>> &adj,vector<bool> &visited,int i,stack<int> &st)
    {
        visited[i] = true;
        for(int k=0;k<adj[i].size();k++)
        {
            if(!visited[adj[i][k]])
            {
                dfs(adj,visited,adj[i][k],st);
            }
        }
        st.push(i);
    }
    
     bool detectCycle_util(vector<vector<int>>& adj,vector<int>& visited,int v)
    {
        if(visited[v]==1)
            return true;
        if(visited[v]==2)
            return false;
        
        visited[v]=1;   //Mark current as visited
        for(int i=0;i<adj[v].size();++i)
            if(detectCycle_util(adj,visited,adj[v][i]))
                return true;
        
        visited[v]=2;   //Mark current node as processed
        return false;
    }
    
    //Cycle detection
    bool detectCycle(vector<vector<int>>& adj,int n)
    {
        vector<int> visited(n,0);
        for(int i=0;i<n;++i)
            if(!visited[i])
                if(detectCycle_util(adj,visited,i))
                    return true;
        return false;
    }
    
    
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prereq) {
        
        vector<vector<int>> adj(numCourses);
        for(int i=0;i<prereq.size();i++)
        {
            adj[prereq[i][1]].push_back(prereq[i][0]);
        }
        
          bool flag = false;
        
//         cyclic or not
       flag = detectCycle(adj,numCourses);
        if(flag)
        {
            cout<<"this is cyclic";
            vector<int> ex;
            return ex;
        }
        
        
        
        
        vector<bool> visited(numCourses,0);
        stack<int> st;
        for(int i=0;i<numCourses;i++)
        {
            if(!visited[i])
            {
                dfs(adj,visited,i,st);
            }
        }
      
        vector<int> ans;
        while(!st.empty())
        {
            ans.push_back(st.top());st.pop();
        }
        return ans;
    }
};