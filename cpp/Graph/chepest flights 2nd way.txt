#include <bits/stdc++.h>
using namespace std;

void dfs(vector<pair<int, int>> adj[], int src, int dst, int k, int &fare, int totalcost, vector<bool> &visited)
{class Solution {
public:
    
            void dfs(vector<pair<int, int>> adj[], int src, int dst, int k, int &fare, int totalcost, vector<bool> &visited)
    {
        if (k < -1)
        {
            return;
        }

        if (src == dst)
        {
            fare = min(fare, totalcost);
            return;
        }    

        visited[src] = true;
        for (auto i : adj[src])
        {
            if (!visited[i.first] && totalcost+i.second <=fare)
            {
                dfs(adj,i.first,dst,k-1,fare,totalcost+i.second,visited);
            }
        }
        visited[src] = false;
    }

    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        
        vector<pair<int, int>> adj[n];

        for (int i = 0; i < flights.size(); i++)
        {
            adj[flights[i][0]].push_back(make_pair(flights[i][1], flights[i][2]));
        }

        stack<int> s;
        vector<bool> visited(n+1, false);
        int fare = INT_MAX;
        dfs(adj, src, dst, K, fare, 0, visited);
        if (fare == INT_MAX)
        {
            return -1;
        }
        return fare;
    }
};