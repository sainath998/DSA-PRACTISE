#include<bits/stdc++.h>
using namespace std;

class Graph
{
    public:

    int v;
    list<int> *adj;
    Graph(int v)
    {
        this->v = v;
        adj = new list<int> [v];
    }
    void addEdge(int a,int b)
    {
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    void bfs(int v);
    void bfsUtil(int v,bool visited[]);
};

void Graph :: bfs(int v)
{
    queue<int> q;
    q.push(v);
    bool visited[v];
    visited[0]=true;
    cout<<"bfs is :  ";
    while (!q.empty())
    {
        int v = q.front();
        q.pop();
        cout<<v<<"  ";
        for(int i : adj[v] )
        {
            if(visited[i] == false)
            {
                visited[i] = true;
                 q.push(i);
            }
        }
    }
    

}

int main()
{
    // adding source nbr and the destination
    Graph g(4);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,2);
    g.addEdge(2,0);
    g.addEdge(2,3);
    g.addEdge(3,3);
    g.bfs(0);
    return 0;

    
}