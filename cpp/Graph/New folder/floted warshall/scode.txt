
#include <bits/stdc++.h>
using namespace std;

// floyed warshall

void floyed(vector<vector<pair<int, int>>> ad, int n)
{
    vector<vector<int>> adj(n, vector<int>(n, INT_MAX));

    for (int i = 0; i < n; i++)
    {
        adj[i][i] = 0;
    }


    for (int i = 0; i < ad.size(); i++)
    {
        for (int j = 0; j < ad[i].size(); j++)
        {
            int src = i;
            int dst = ad[i][j].first;
            int cost = ad[i][j].second;
            adj[src][dst] = cost;
        }
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            for (int k = 0; k < n; k++)
            {
                if (adj[i][k] != INT_MAX && adj[k][j] != INT_MAX && adj[i][j] > adj[i][k] + adj[k][j])
                {
                    adj[i][j] = adj[i][k] + adj[k][j];
                }
            }
        }
    }

    cout << "\nthe cost matrix is  : \n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (adj[i][j] < 0)
            {
                cout << "n"
                     << "     ";
            }
            else
            {
                cout << adj[i][j] << "     ";
            }
        }
        cout << "\n";
    }
}

int main()
{
    int n = 7;
    vector<vector<pair<int, int>>> v(n);
    v[0].push_back(make_pair(1, 10));
    v[0].push_back(make_pair(3, 40));
    v[1].push_back(make_pair(0, 10));
    v[1].push_back(make_pair(2, 10));
    v[2].push_back(make_pair(1, 10));
    v[2].push_back(make_pair(3, 10));
    v[3].push_back(make_pair(0, 40));
    v[3].push_back(make_pair(4, 2));
    v[4].push_back(make_pair(3, 2));
    v[4].push_back(make_pair(5, 3));
    v[4].push_back(make_pair(6, 10));
    // v[4].push_back(make_pair(6, 4));   //->gives 36
    v[5].push_back(make_pair(4, 3));
    v[5].push_back(make_pair(6, 3));
    v[6].push_back(make_pair(4, 8));
    v[6].push_back(make_pair(5, 3));

    floyed(v, n);
}