#include <bits/stdc++.h>
using namespace std;

pair<int, int> addEdge(vector<pair<int, int>> graph[], int a, int b, int c)
{
    graph[a].push_back(make_pair(b, c));
    graph[b].push_back(make_pair(a, c));
}

struct cl
{
public:
    int src, cost;
    string asf;
    cl(int a, int b, string c)
    {
        this->src = a;
        this->cost = b;
        this->asf = c;
    }
};

class comparator
{
    public:

    bool operator()(cl a,cl b)
    {
        if(b.cost-a.cost >0)
        {
            return false;
        }
        return true;
    }
};

void djetra(int n, vector<pair<int, int>> graph[], int src, int dst)
{
    priority_queue<cl,vector<cl>,comparator> q;
    q.push(cl(src, 0, to_string(src)));
    vector<bool> visited(n, false);
    string ans = "";
    while (q.empty() == false)
    {
        cl ab = q.top();
        int rem = q.top().src;
        q.pop();
        // ans = ans + to_string(rem);
        ans = ans+to_string(rem)+"-";
        if (rem == dst)
        {
            ans = ab.asf;
            break;
        }
        if(visited[rem] == true)
        {
            continue;
        }
        visited[rem] = true;
        for (auto i : graph[rem])
        {
            if (visited[i.first] == false)
            {
                q.push(cl(i.first, ab.cost + i.second, ab.asf + "-" + to_string(i.first)));
            }
        }
    }
    cout << ans;
}

int main()
{
    int n = 7;
    vector<pair<int, int>> graph[n];

    addEdge(graph, 0, 1, 10);
    addEdge(graph, 0, 3, 40);
    addEdge(graph, 1, 2, 10);
    addEdge(graph, 2, 3, 10);
    addEdge(graph, 3, 4, 2);
    addEdge(graph, 4, 5, 3);
    addEdge(graph, 4, 6, 8);
    addEdge(graph, 5, 6, 3);

    cout << "the graph  is : \n";

    for (int i = 0; i < n; i++)
    {
        cout << i << " --> ";
        for (auto node : graph[i])
        {
            cout << node.first << " ";
        }
        cout << "\n";
    }

    djetra(n, graph, 0, 6);
}



/*

// dijkeshtras not

#include <bits/stdc++.h>
using namespace std;

struct cls
{
public:
    int src, wsf;
    string psf;
    cls(int src, string psf, int wsf)
    {
        this->psf = psf;
        this->src = src;
        this->wsf = wsf;
    }
};

class comparator
{
public:
    bool operator()(cls a, cls b)
    {
        if(b.wsf - a.wsf >0)
        {
            return false;
        }
        return true;
    }
};

string dijkeshtras(int src, int dst, vector<vector<pair<int, int>>> &adj)
{
    vector<bool> visited(7, false);
    priority_queue<cls, vector<cls>, comparator> q;
    string s = "";
    cls temp(src, to_string(src) + "-", 0);
    q.push(temp);
    int ans = 0;
    while (q.empty() == false)
    {
        temp = q.top();
        q.pop();
        cout << "the node is : " << temp.src << endl;
        ans = temp.wsf;
        s = s + to_string(temp.src) + "-";
        if (temp.src == dst)
        {
            break;
        }
        if (visited[temp.src] == true)
        {
            continue;
        }
        visited[temp.src] = true;
        int i = 0;
        cout<<"for node  :  "<<temp.src<<"   :   ";
        for (auto p : adj[temp.src])
        {
            if (visited[p.first] == false)
            {
                cout<<p.first<<"  ";
                q.push(cls(p.first, temp.psf + to_string(p.first) + "-", temp.wsf + p.second));
            }
        }
        cout<<endl;
    }
    s.pop_back();
    cout << s;
    cout<<"\nthe cost is  :  "<<ans;
    return "";
}

int main()
{
    int n = 5;
    vector<vector<pair<int, int>>> v(7);
    v[0].push_back(make_pair(1, 10));
    v[0].push_back(make_pair(3, 40));
    v[1].push_back(make_pair(0, 10));
    v[1].push_back(make_pair(2, 10));
    v[2].push_back(make_pair(1, 10));
    v[2].push_back(make_pair(3, 10));
    v[3].push_back(make_pair(0, 40));
    v[3].push_back(make_pair(4, 2));
    v[4].push_back(make_pair(3, 2));
    v[4].push_back(make_pair(5, 3));
    v[4].push_back(make_pair(6, 10));
    // v[4].push_back(make_pair(6, 4));   ->gives 36
    v[5].push_back(make_pair(4, 3));
    v[5].push_back(make_pair(6, 3));
    v[6].push_back(make_pair(4, 8));
    v[6].push_back(make_pair(5, 3));
    dijkeshtras(0, 6, v);
}
*/