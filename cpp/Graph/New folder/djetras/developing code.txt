#include <bits/stdc++.h>
using namespace std;

void dijkeshtras(int src, int dst, vector<vector<pair<int, int>>> adj)
{
    int n = 7;
    vector<int> parent(n, -1);
    vector<int> values(n, INT_MAX);
    vector<bool> processed(n, false);
    values[0] = 0;
    // stores the values of vertex having min value
    // ind ,val
    priority_queue<pair<int, int>> pq;
    pq.push({0, 0});

    for (int i = 0; i < n; i++)
    {
        int minind = pq.top().first;
        pq.pop();

        processed[minind] = true;

        // traverse from this to all nodes

        for (int j = 0; j < adj[minind].size(); j++)
        {
            pair<int, int> newnode = adj[minind][j];

            // ind,value
            if (values[minind] != INT_MAX && processed[newnode.first] == false && values[minind] + newnode.second < values[newnode.first])
            {
                values[newnode.first] = newnode.second + values[minind];
                parent[newnode.first] = minind;
                pq.push({newnode.first, values[newnode.first]});
            }
        }
    }
    cout << "\nthe min cost is :  \n";
    for (int i = 1; i < n; i++)
    {
        cout << "U->V: " << parent[i] << "->" << i << " wt = " << adj[parent[i]][i].second << "\n";
    }
}

int main()
{
    int n = 6;
    vector<vector<pair<int, int>>> v(7);
    v[0].push_back(make_pair(1, 1));
    v[0].push_back(make_pair(2, 4));
    v[1].push_back(make_pair(0, 1));
    v[1].push_back(make_pair(2, 4));
    v[1].push_back(make_pair(3, 2));
    v[2].push_back(make_pair(0, 4));
    v[2].push_back(make_pair(1, 4));
    v[2].push_back(make_pair(3, 3));
    v[2].push_back(make_pair(4, 5));

    v[3].push_back(make_pair(1, 2));
    v[3].push_back(make_pair(2, 3));
    v[3].push_back(make_pair(4, 4));
    v[3].push_back(make_pair(5, 26));
    v[4].push_back(make_pair(1, 7));
    v[4].push_back(make_pair(2, 5));
    v[4].push_back(make_pair(3, 4));
    v[4].push_back(make_pair(5, 7));
    // v[4].push_back(make_pair(6, 4));   ->gives 36
    v[5].push_back(make_pair(4, 4));
    v[5].push_back(make_pair(3, 6));
    dijkeshtras(0, 6, v);
}