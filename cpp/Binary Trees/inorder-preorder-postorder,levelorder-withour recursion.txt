#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    struct node *left, *right;
};

node *newnode(int data)
{
    node *temp;
    temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
}

// preorder and post ordere are same but push is int right,lelft(preorder)   , push(left,right)  and print the reverse of traversal by using stack(stack prints in reverse way )

void preorder(node *root)
{
    stack<node *> s;
    node *curr;
    curr = root;
    s.push(curr);
    while (s.empty() == false)
    {
        curr = s.top();
        cout << curr->data << "  ";
        s.pop();
        if (curr->right)
        {
            s.push(curr->right);
        }
        if (curr->left)
        {
            s.push(curr->left);
        }
    }
    cout << endl;
}
void inorder(node *root)
{
    stack<node *> s;
    node *curr;
    curr = root;
    while (s.empty() == false || curr != NULL)
    {
        while (curr != NULL)
        {
            s.push(curr);
            curr = curr->left;
        }

        if (s.empty() == false && curr == NULL)
        {
            curr = s.top();
            s.pop();
            cout << curr->data << "  ";
        }
        curr = curr->right;
    }
    cout << endl;
}
void postorder(node *root)
{
    stack<node *> s1;
    stack<node *> s2;
    node *curr;
    curr = root;
    s1.push(curr);
    while (s1.empty() == false)
    {
        curr = s1.top();
        s1.pop();
        if (curr->left)
        {
            s1.push(curr->left);
        }
        if (curr->right)
        {
            s1.push(curr->right);
        }
        s2.push(curr);
    }

    while (s2.empty() == false)
    {
        cout << s2.top()->data << "  ";
        s2.pop();
    }
    cout << endl;
}

void level(node *root)
{
    queue<node *> q;
    node *curr;
    curr = root;
    q.push(curr);
    while (q.empty() == false)
    {
        curr = q.front();
        cout << curr->data << "  ";
        q.pop();
        if (curr->left)
        {
            q.push(curr->left);
        }
        if (curr->right)
        {
            q.push(curr->right);
        }
    }
    cout << endl;
}

void left(node *root, int lev, bool l[])
{
    if (root == NULL)
    {
        return ;
    }
    if (l[lev] == false)
    {
        cout << root->data << "  ";
        l[lev] = true;
    }

    if (root->left)
    {
        left(root->left, lev + 1, l);
    }
    if (root->right)
    {
        left(root->right, lev + 1, l);
    }
}


int main()
{
    node *root;
    root = newnode(1);
    root->left = newnode(2);
    root->right = newnode(3);
    root->left->left = newnode(4);
    root->left->right = newnode(5);
    root->right->left = newnode(6);
    root->right->right = newnode(7);

    bool lev[100];
    for (int i = 0; i < 100; i++)
    {
        lev[i] = false;
    }

    preorder(root);
    inorder(root);
    postorder(root);
    level(root);
    left(root, 0, lev);

    for (int i = 0; i < 100; i++)
    {
        lev[i] = false;
    }
    cout<<endl;
}