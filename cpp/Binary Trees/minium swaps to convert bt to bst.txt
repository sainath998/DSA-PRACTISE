#include<bits/stdc++.h>
using namespace std;

int in= 0;

void level_prder_to_preorder(int a[],int arr[],int n,int ind)  // instead of int arr[] and in we can use vector
{
    if(ind >= n)
    {
        return ;
    }
    level_prder_to_preorder(a,arr,n,2*ind+1);

    arr[in] = a[ind];in++;
    
    level_prder_to_preorder(a,arr,n,2*ind+2);
}


int main()
{
    int a[] = {5,6,7,8,9,10,11};
    int n = sizeof(a)/sizeof(int);
    int arr[n];
    cout<<"\nthe preorder is : ";
    level_prder_to_preorder(a,arr,n,0);
    for(int i = 0;i<n;i++)
    {
        cout<<arr[i]<<"  ";
    }
    return 0;
}




/*#include <bits/stdc++.h>
using namespace std;

struct node
{
    int val;
    node *left, *right;
};

node *newnode(int val)
{
    node *temp;
    temp = new node;
    temp->val = val;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}


vector<int> v;
vector<int> inorder(node *root)
{
    queue<node *> q;
    q.push(root);
    while (!q.empty())
    {
        node *temp = q.front();
        q.pop();
        v.push_back(temp->val);
        if (temp->left)
        {
            q.push(temp->left);
        }
        if (temp->right)
        {
            q.push(temp->right);
        }
    }
    return v;
}

int findms(int arr[],int n)
{
    int count=0;
    vector<pair<int,int>> ve(n);
    for(int i =0;i<n;i++)
    {
        ve[i] = {arr[i],i};
    }
    sort(ve.begin(),ve.end());
    for(int i=0;i<n;i++)
    {
        if(ve[i].second == i)
        {
            continue;
        }
        else
        {
            count++;
            swap(ve[i],ve[ve[i].second]);i--;
        }
    }
    return count;
}

int main()
{
    node *root;
    root = newnode(10);
    root->left = newnode(-2);
    root->right = newnode(6);
    root->left->left = newnode(8);
    root->left->right = newnode(-4);
    root->right->left = newnode(7);
    root->right->right = newnode(5);
    // convert binary tree to binary search tree
    inorder(root);
    int n = v.size();
    int arr[n];
    cout<<endl;
    for (int i = 0; i < v.size(); i++)
    {
        arr[i] = v[i];
    }
    
    int minswaps = findms(arr,n);
    return minswaps;
}