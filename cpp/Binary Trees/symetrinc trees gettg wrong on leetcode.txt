/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    
bool ismirror(TreeNode *roota,TreeNode *rootb)
{
    if(roota == NULL)
    {
        if(rootb == NULL)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    bool left = ismirror(roota->left,rootb->left);
    bool right = ismirror(roota->right,rootb->right);
    if(roota->val == rootb->val)
    {
        return left && right;
    }
    else
    {
        return false;
    }
}
    
    TreeNode* swap(TreeNode *root)
{
    if(root == NULL)
    {
        return NULL;
    }
    if(root->left)
    swap(root->left);
    if(root->right != NULL)
    swap(root->right);
    TreeNode *temp;
    temp = root->left;
    root->left = root->right;
    root->right = temp;
    return root;
}
    
    TreeNode *mirror(TreeNode *root)
{
    root = swap(root);
    return root;
}
    
    bool isSymmetric(TreeNode* root) {
        
        TreeNode *root2 = mirror(root);
        bool flag = ismirror(root,root2);
        if(flag)
        {
            return true;
        }
        return false;
        
        
    }
};