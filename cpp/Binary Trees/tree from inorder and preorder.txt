#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    node *left, *right;
};

int idx = 0;
unordered_map<int, int> m;

struct node *newnode(int data)
{
    struct node *temp;
    temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

node *solve(int pre[], int in[], int lb, int ub)
{
    if(lb > ub)
    {
        return NULL;
    }
    node *res = newnode(pre[idx]);
    idx++;
    if(lb == ub)
    {
        return res;
    }

    int mid = m[res->data];
    res->left = solve(pre,in,lb,mid-1);
    res->right = solve(pre,in,mid+1,ub);

}

node *buidtree(int in[], int pre[], int n)
{
    idx = 0;
    m.clear();
    for (int i = 0; i < n; i++)
    {
        m[in[i]] = i;   
    }
    node *root = solve(pre, in, 0, n - 1);
    return root;
}


void level(node *root)
{
    queue<node*> q;
    q.push(root);
    while (q.empty()== false)
    {
        node *curr;
        curr = q.front();
        q.pop();
        if(curr->left)
        {
            q.push(curr->left);
        }
        if(curr->right)
        {
            q.push(curr->right);
        }
        cout<<curr->data<<"  ";
    }
    
}

int main()
{
    int in[7] = {4,2,5,1,6,3,7};
    int pr[7] = {1,2,4,5,3,6,7};
    int n = 7;
    node *root;
    root = buidtree(in,pr,n);
    level(root);
    return 0;
}