#include <bits/stdc++.h>
using namespace std;

struct tree
{
    int data;
    tree *left, *right;
};

int findmax(tree *root)
{
    if(root == NULL)
    {
        return INT_MIN;
    }
    int lm  = findmax(root->left);
    int rm = findmax(root->right);
    int ma = max(root->data,max(lm,rm));
    return ma;
}

int findsize(tree *root)
{
    if(root == NULL)
    {
        return 0;
    }
    int ls = findsize(root->left);
    int rs = findsize(root->right);
    int totalsize = ls+rs+1;
    return totalsize;
}

int findsum(tree *root)
{
    if(root == NULL)
    {
        return 0;
    }
    int ls = findsum(root->left);
    int rs = findsum(root->right);
    int ts = ls+rs+root->data;
    return ts;
}



tree *newnode(int data)
{
    tree *temp;
    temp = new tree;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

int findh(tree *root)
{
    if(root == NULL)
    {
        return -1;
    }
    int lh = findh(root->left);
    int rh = findh(root->right);
    int mh = max(lh,rh)+1;
    return mh;
}


int main()
{
    tree *root;
    root = newnode(1);
    root->left = newnode(2);
    root->right= newnode(3);
    root->left->left = newnode(4);
    root->left->right = newnode(5);
    root->right->left = newnode(6);
    root->right->left->left = newnode(8);
    root->right->left->left->right = newnode(8);
    root->right->right = newnode(7);
    // hight of tree
    int hight = findh(root);
    cout<<"\nthe hight of the given tree is  :   "<<hight;
    int sum= findsum(root);
    cout<<"\nthe total sum of the tree is  :  "<<sum;
    int max  = findmax(root);
    cout<<"\nthe max of the binary treee is  :  "<<max;
    int size =findsize(root); // size is toatl nodes in the tree
    cout<<"\nthe size of the  tree is  :  "<<size;
    return 0;
}