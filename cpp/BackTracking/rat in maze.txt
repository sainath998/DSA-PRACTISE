#include <bits/stdc++.h>
using namespace std;
int  ans =0;

// pow(2,n) => complexity

int findpath(int arr[4][4],int i,int j,int n,vector<vector<bool>> visited)
{
    if(i<0 || j<0 || i>=n || j>=n || visited[i][j] == true || arr[i][j] == 0)
    {
        return 0;
    }
    visited[i][j] = true;
    // up down left right
    if(i == n-1 && j == n-1)
    {
        ans++;
        return 1;
    }
    int a = findpath(arr,i+1,j,n,visited);
    int b = findpath(arr,i-1,j,n,visited);
    int c = findpath(arr,i,j-1,n,visited);
    int d = findpath(arr,i,j+1,n,visited);
    visited[i][j] = false;
    return a+b+c+d;
}

int main()
{
    int arr[4][4] = { 
                      {1, 0, 0, 0},
                      {1, 1, 0, 1},
                      {1, 1, 0, 0},
                      {0, 1, 1, 1}
                    };
    
    int n = 4;
    vector<vector<bool>> visited(n);
    for(int i=0;i<n;i++)
    {
        for(int  j=0;j<n;j++)
        {
            visited[i].push_back(false);
        }
    }
   int k = findpath(arr,0,0,n,visited); 
    cout<<"\nthe possible paths are  :  "<<k;   
}