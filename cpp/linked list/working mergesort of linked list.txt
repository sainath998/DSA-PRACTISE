#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    node *next;
};



void splt(node *root,node **left,node **right)
{
    node *slow =root,*fast = root;
    while (fast != NULL && fast->next != NULL)
    {
        fast = fast->next;
        if(fast->next != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
    }
    *left = root;
    *right = slow->next;
    slow->next = NULL;
}

node *merge(node *a,node *b)
{
    node *result= NULL;
    if(a == NULL)
    {
        return b;
    }
    if(b == NULL)
    {
        return a;
    }

    if(a->data <= b->data)
    {
        result  =a;
        result->next = merge(a->next,b);
    }
    else
    {
        result  =b;
        result->next = merge(a,b->next);
    }
    return result;
}

void mergesort(node **rootref)
{
    node *root = *rootref;
    if(root == NULL || root->next == NULL)
    {
        return ;
    }
    // split and merge
    node *a,*b;
    splt(root,&a,&b);
    mergesort(&a);
    mergesort(&b);
    *rootref = merge(a,b);
}


node *newnode(int data)
{
    node *temp = new node;
    temp->data = data;
    temp->next = NULL;
    return temp;
}

int main()
{
    node *root;
    root = newnode(0);
    root->next = newnode(1);
    root->next->next = newnode(4);
    root->next->next->next = newnode(7);
    root->next->next->next->next = newnode(3);
    root->next->next->next->next->next = newnode(6);
    root->next->next->next->next->next->next = newnode(2);
    mergesort(&root);
    while (root != NULL)
    {
        cout<<root->data<<"  ";
        root = root->next;
    }
    
    return 0;
}