#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    struct node *next;
};

node *nroot;

struct node *newnode(int data)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = data;
    temp->next = NULL;
}

void rev(struct node *root)
{
    node *prev,*curr,*next;
    prev = NULL;
    curr  = root;
    
    while(curr != NULL)
    {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    nroot = prev;
}

void print()
{
    node *temp = nroot;
    while (temp != NULL)
    {
        cout << temp->data << "  ";
        temp = temp->next;
    }
}

int main()
{
    nroot = (struct node *)malloc(sizeof(struct node));
    struct node *root = newnode(1);
    int choice;
    cin >> choice;
    node *curr, *prev;
    prev = root;
    while (choice)
    {
        int data;
        cin >> data;
        curr = newnode(data);
        prev->next = curr;
        prev = curr;
        cin >> choice;
    }

    rev(root);

    print();

    return 0;
}



#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    struct node *next;
};

node *nroot;

struct node *newnode(int data)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = data;
    temp->next = NULL;
}

void rev(struct node *root)
{
    if (root->next == NULL)
    {
        nroot = root;
        return;
    }

    rev(root->next);
    root->next->next = root;
    root->next = NULL;
}

void print()
{
    node *temp = nroot;
    while (temp != NULL)
    {
        cout << temp->data << "  ";
        temp = temp->next;
    }
}

int main()
{
    nroot = (struct node *)malloc(sizeof(struct node));
    struct node *root = newnode(1);
    int choice;
    cin >> choice;
    node *curr, *prev;
    prev = root;
    while (choice)
    {
        int data;
        cin >> data;
        curr = newnode(data);
        prev->next = curr;
        prev = curr;
        cin >> choice;
    }

    rev(root);

    print();

    return 0;
}