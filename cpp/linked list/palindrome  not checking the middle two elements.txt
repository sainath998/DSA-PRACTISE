#include <bits/stdc++.h>
using namespace std;

struct node
{
    char data;
    node *next;
};

node *newnode(char data)
{
    node *temp = new node;
    temp->data = data;
    temp->next = NULL;
    return temp;
}

node *rev(node *head)
{
    if (head == NULL || head->next == NULL)
        return head;

    /* reverse the rest list and put 
          the first element at the end */
    node *rest = rev(head->next);
    head->next->next = head;

    /* tricky step -- see the diagram */
    head->next = NULL;

    /* fix the head pointer */
    return rest;
}

bool ispalindrome(node *root)
{
    node *p1, *p2;
    p1 = root->next, p2 = root;
    while (p1 != NULL)
    {
        p1 = p1->next->next;
        if (p1 != NULL)
        {
            p1 = p1->next;
            p2 = p2->next;
        }
    }
    node *p3 = p2;
    p3 = rev(p2->next);
    p2->next = NULL;
    p1 = root;
    p2 = p3;
    // cout<<"p1 is  :  ";
    // node *temp =p1;
    // while (temp!= NULL)
    // {
    //     cout<<temp->data<<"   ";temp = temp->next;
    // }
    // temp = p2;
    // cout<<"\nthe p2 is  : ";
    // while (temp != NULL)
    // {
    //     cout<<temp->data<<"  ";temp = temp->next;
    // }

    while (p1 != NULL && p2 !=NULL)
    {
        if (p1->data != p2->data)
        {
            return false;
        }
        p1 = p1->next;
        p2 = p2->next;
    }
    return true;
}

int main()
{
    node *root;
    root = newnode('a');
    root->next = newnode('b');
    root->next->next = newnode('g');
    root->next->next->next = newnode('i');
    root->next->next->next->next = newnode('b');
    root->next->next->next->next->next = newnode('a');
    bool flag = ispalindrome(root);
    if (flag)
    {
        cout << "true";
        return 0;
    }
    cout << "false";
    return 0;
}