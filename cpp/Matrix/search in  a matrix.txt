bool searchMatrix(vector<vector<int>> &arr, int target)
{
    int m = arr.size();
    int n = arr[0].size();

    // binary search  on first column
    int l = 0, r = m - 1;

    int mid = (l + r) / 2;

    while (l <= r)
    {
        if (arr[mid][0] == target)
        {
            return true;
        }

        if (mid == n - 1)
        {
            break;
        }
        else if (arr[mid][0] < traget && arr[mid + 1] > target)
        {
            break;
        }
        else if (arr[mid][0] < target)
        {
            l = mid + 1;
        }
        else
        {
            r = mid - 1;
        }
    }

    int i = mid;

    l = 0, r = n - 1;

    while (l <= r)
    {
        if (arr[i][mid] == target)
        {
            return true;
        }
        else if (arr[i][mid] < target)
        {
            l = mid + 1;
        }
        else
        {
            r = mid - 1;
        }
    }
    return false;
}

/*

    bool searchMatrix(vector<vector<int>> &arr, int target)
    {
        int m = arr.size();
        int n = arr[0].size();

        // binary search  on first column
        int l = 0, r = m - 1;

        int mid = (l + r) / 2;

        while (l <= r)
        {
            mid = (l+r)/2;
            if (arr[mid][0] == target)
            {
                return true;
            }

            if (mid == m- 1)
            {
                break;
            }
            
            else if (arr[mid][0] < target && arr[mid + 1][0] > target)
            {
                break;
            }
            else if (arr[mid][0] < target)
            {
                l = mid + 1;
            }
            else
            {
                r = mid - 1;
            }
        }

        int i = mid;

        l = 0, r = n - 1;

        while (l <= r)
        {
            mid = (l+r)/2;
            if (arr[i][mid] == target)
            {
                return true;
            }
            else if (arr[i][mid] < target)
            {
                l = mid + 1;
            }
            else
            {
                r = mid - 1;
            }
        }
        return false;
    }
*/
