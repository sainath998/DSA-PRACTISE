#include <bits/stdc++.h>
using namespace std;

bool cmp(vector<int> a, vector<int> b)
{
    if (a[0] < b[0])
    {
        return true;
    }
    if (a[0] == b[0])
    {
        if (a[1] <= b[1])
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    return false;
}

vector<vector<int>> merge(vector<vector<int>> &nums)
{
    sort(nums.begin(), nums.end());
    // cout << "\nthe vector is : ";
    // for (int i = 0; i < 4; i++)
    // {
    //     for (int j = 0; j < nums[i].size(); j++)
    //     {
    //         cout << nums[i][j] << " ";
    //     }
    //     cout << "\n";
    // }
    int cnt = 0;

    int n = nums.size();
    int i = 1;
    int first, second;
    vector<vector<int>> ans(n);
    first = nums[0][0];
    second = nums[0][1];
    while (i < n)
    {
        if (nums[i][0] <= second)
        {
            second = max(second, nums[i][1]);
            i++;
        }
        else
        {
            // cout << first << "," << second << "\n";
            ans[cnt].push_back(first);
            ans[cnt].push_back(second);
            cnt++;
            first = nums[i][0];
            second = nums[i][1];
            i++;
        }
    }
    ans[cnt].push_back(first);
    ans[cnt].push_back(second);
    cnt++;

    vector<vector<int>> fin(cnt);
    for (int i = 0; i < cnt; i++)
    {
        fin[i].push_back(ans[i][0]);
        fin[i].push_back(ans[i][1]);
    }
    // cout << "\nthe cnt is  :  " << cnt << " and ans is  : \n";
    // for (int i = 0; i < fin.size(); i++)
    // {
    //     for (int j = 0; j < fin[i].size(); j++)
    //     {
    //         cout << fin[i][j] << " ";
    //     }
    //     cout << "\n";
    // }
    return fin;
}

int main()
{
    vector<vector<int>> nums(4);
    nums[0].push_back(1);
    nums[0].push_back(3);
    nums[1].push_back(2);
    nums[1].push_back(6);
    nums[2].push_back(8);
    nums[2].push_back(10);
    nums[3].push_back(9);
    nums[3].push_back(18);
    //  1,3  2,6   8,10   15,18

    merge(nums);
}